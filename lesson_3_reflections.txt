When would you want to use a remote repository rather than keeping all your work local?

Sometimes you have multiple people working on the same project from different locations, or want to be able to work on the project from different computers.  It's idea to have the a remote repository where mutliple people or computers can access and make commits.


Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

Most of the time you would be working on the projects locally, so you may have made changes to your local files and if the remote repository gets updated automatically it may affect the changes you've made locally.


Describe the differences between forks, clones, and branches. When would you use one instead of another?

Forks are repositories that belong to someone else, you "borrowed" their projects but not by cloning because you don't have permissions to make changes to them directly.
Clones are direct copies of existing repositories.  You want to clone a project when you have the permission of the author or if the project belongs to you and you want to work on  them from a different computer or just a differnt location on your computer.
Branches are different verions of your project that make have different features and are modifies for different purposes. You use branches when you don't want your master branch to be affected while trying out different things.


What is the benefit of having a copy of the last known state of the remote stored locally?

This way even if you are working offline, you can still have a copy of the most recent remote where you can compare with or work from.


How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

Without Git or Github, I would probably use something like Google Docs or Dropbox.  Google Docs is nice because you can have mutiple users making changes to the document at the same time.  And Dropbox is good for sharing files across the board.  But neither of them are very good for use in making changes to programming codes. They just don't have the features that Git or Github do when it comes to comparing differences in different versions of the code and merging branches and such.


When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

When you are collaborating on the project with other people, you would want to have the changes you've made on another branch.  The benefit of this would be that you have to push that branch to github and allow other to see if the changes you've made will create a conflict or not with whatever they're doing.  Only when everyone has approved of your changes should you commit it to the master branch.
Making changes directly in the master branch would be less hassle and quicker, but should really be used when you are sure it won't cause any problems in the master branch.