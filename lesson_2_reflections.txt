What happens when you initialize a repository? Why do you need to do it?

When initializing a repository, a hidden .git directory is created that will take note of the files in the working directory and track them from then on as changes are made to those files.


How is the staging area different from the working directory and the repository? What value do you think it offers?

Staging area holds files temporarily that could end up being committed.  It's a transitional area for files from the working directory and to the repository.  Files in both the working directory and repository are permanent and saved.  Files in the Staging area can be removed from committing.  Really, the staging area is just a place for files from the working directory that are marked to be committed.  It allows users to compare difference between files from the working directory and repository.


How can you use the staging area to make sure you have one commit per logical change?

We can compare the files in the staging area with their committed versions in the repository.  Only after confirm the changes that's been made in the staging area files would we commit them to the repository.


What are some situations when branches would be helpful in keeping your history organized? How would branches help?

When you want to add experimental changes/features to your project without losing the current version. Creating another branch to hold the experimental version could help keeping both versions seperate until you decide to keep or discard the changes.
Or when you want to adopt your projects for different purposes with alternate variations of code, making a branch for each version could help maintain them all at the same time without confusion.


How do the diagrams help you visualize the branch structure?

The diagrams makes it clear the flow of each branch and where each of the branches split from the master branch.  It's like tree branch spliting up into smaller branches.  It makes tracking the location of each commit relative to the origin very simple.


What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

The result of merging two branches together is that commits from both branches are not become one.  And everything is combined under one label.  The diagram is shown as such so we can see that the new head commit after the merge has access to all of the previous commits from both branches.


What are the pros and cons of Git's automatic merging vs. always doing merges manually?

Pros of auto merging: less hassle for the user; it will always perform as instructed (no human error); fast.
Cons: may run into conflicts that can't be solved with auto merge.